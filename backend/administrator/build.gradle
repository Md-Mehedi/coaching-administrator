
plugins {
	id 'org.springframework.boot' version '2.7.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}
jar {
    enabled = true
}

group = 'coaching'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	//implementation 'org.mindrot.bcrypt'
	implementation 'org.springframework.security:spring-security-crypto'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'org.slf4j:slf4j-api:1.7.6'
	implementation 'javax.activation:activation:1.1.1'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	//implementation 'org.hibernate:hibernate-entitymanager:4.3.8.Final'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'
}

tasks.named('test') {
	useJUnitPlatform()
}

// springBoot {
//     mainClassName = 'coaching.administrator.AdministratorApplication'
// }

jar {

    enabled = true
    baseName = 'coaching-admin'
    version =  '0.0.1-SNAPSHOT'

}
bootJar {
    classifier = 'boot'
}


// // Add these START
// bootJar {
//     archiveClassifier.set('boot')
// }

// jar {
//     archiveClassifier.set('')
// } 

// task stage(type: Copy, dependsOn: [clean, build]) {
//     from jar.archivePath
//     into project.rootDir 
//     rename {
//         'app.jar'
//     }
// }

// clean << {
//     project.file('app.jar').delete()
// }

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

// gradle.taskGraph.whenReady {
//   taskGraph ->
//     if (taskGraph.hasTask(stage)) {
//       test.enabled = false
//     }
// }


// clean << {
//     project.file('app.jar').delete()
// }

// task stage(type: Copy, dependsOn: [clean, build]) {
//     from jar.archivePath
//     into project.rootDir
//     rename {
//         'app.jar'
//     }
// }
// stage.mustRunAfter(clean)





// clean << {
//     project.file('app.jar').delete()
// }
